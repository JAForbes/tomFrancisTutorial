{
  "name": "sat",
  "description": "Library for performing 2D collision detection",
  "version": "0.5.0",
  "author": {
    "name": "Jim Riecken",
    "email": "jriecken@gmail.com"
  },
  "keywords": [
    "collision detection",
    "sat",
    "game"
  ],
  "license": {
    "type": "MIT",
    "url": "http://github.com/jriecken/sat-js/raw/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jriecken/sat-js.git"
  },
  "bugs": {
    "url": "http://github.com/jriecken/sat-js/issues"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "SAT.js",
  "devDependencies": {
    "mocha": "^2.1.0"
  },
  "gitHead": "9c1ee365218fd2d2a372cb5ca141959bbe6f92c3",
  "readme": "SAT.js\n======\n\n - [Classes](#classes)\n - [Collision Tests](#tests)\n - [Examples](#examples)\n\nAbout\n-----\n\nSAT.js is a simple JavaScript library for performing collision detection (and projection-based collision response) of simple 2D shapes.  It uses the [Separating Axis Theorem](http://en.wikipedia.org/wiki/Hyperplane_separation_theorem) (hence the name)\n\nIt supports detecting collisions between:\n - Circles (using Vornoi Regions.)\n - Convex Polygons (and simple Axis-Aligned Boxes, which are of course, convex polygons.)\n\nIt also supports checking whether a point is inside a circle or polygon.\n\nIt's released under the [MIT](http://en.wikipedia.org/wiki/MIT_License) license.\n\nCurrent version: `0.5.0`. [Annotated source code](http://jriecken.github.io/sat-js/docs/SAT.html) is available.\n\nNicely compresses with the [Google Closure Compiler](https://developers.google.com/closure/compiler/) in **Advanced** mode to about 6KB (2KB gzipped)\n\nTo use it in node.js, you can run `npm install sat` and then use it with `var SAT = require('sat');`\n\n<a name=\"classes\"></a>\nClasses\n--------\n\nSAT.js contains the following JavaScript classes:\n\n### SAT.Vector (aliased as SAT.V)\n\nThis is a simple 2D vector/point class.  It is created by calling:\n```javascript\n// Create the vector (10,10) - If (x,y) not specified, defaults to (0,0).\nvar v = new SAT.Vector(10, 10)\n```\n\nIt has the following properties:\n\n - `x` - The x-coordinate of the Vector.\n - `y` - The y-coordinate of the Vector.\n\nIt contains the following methods:\n\n - `copy(other)` - Copy the value of another Vector to this one.\n - `clone()` - Return a new vector with the same coordinates as this one.\n - `perp()` - Change this vector to be perpendicular to what it was before.\n - `rotate(angle)` - Rotate this vector counter-clockwise by the specified number of radians.\n - `reverse()` - Reverse this Vector.\n - `normalize()` - Make the Vector unit-lengthed.\n - `add(other)` - Add another Vector to this one.\n - `sub(other)` - Subtract another Vector from this one.\n - `scale(x,y)` - Scale this Vector in the X and Y directions.\n - `project(other)` - Project this Vector onto another one.\n - `projectN(other)` - Project this Vector onto a unit Vector.\n - `reflect(axis)` - Reflect this Vector on an arbitrary axis Vector.\n - `reflectN(axis)` - Reflect this Vector on an arbitrary axis unit Vector.\n - `dot(other)` - Get the dot product of this Vector and another.\n - `len2()` - Get the length squared of this Vector.\n - `len()` - Get the length of this Vector\n\n### SAT.Circle\n\nThis is a simple circle with a center position and a radius.  It is created by calling:\n```javascript\n// Create a circle whose center is (10,10) with radius of 20\nvar c = new SAT.Circle(new Sat.Vector(10,10), 20);\n```\n\nIt has the following properties:\n\n - `pos` - A Vector representing the center of the circle.\n - `r` - The radius of the circle\n\n\n### SAT.Polygon\n\nThis is a **convex** polygon, whose points are specified in a counter-clockwise fashion.  It is created by calling:\n```javascript\n// Create a triangle at (0,0)\nvar p = new SAT.Polygon(new SAT.Vector(), [\n  new SAT.Vector(),\n  new SAT.Vector(100,0),\n  new SAT.Vector(50,75)\n]);\n```\n\nYou can create a line segment by creating a `Polygon` that contains only 2 ppoints.\n\nIt has the following properties:\n\n - `pos` - The position of the polygon (all points are relative to this).\n - `points` - Array of vectors representing the original points of the polygon.\n - `angle` - Angle to rotate the polgon (affects `calcPoints`)\n - `offset` - Translation to apply to the polygon before the `angle` rotation (affects `calcPoints`)\n - `calcPoints` - (Calculated) The collision polygon - effectively `points` with `angle` and `offset` applied.\n - `edges` - (Calculated) Array of Vectors representing the edges of the calculated polygon\n - `normals` - (Calculated) Array of Vectors representing the edge normals of the calculated polygon (perpendiculars)\n\nYou should _not_ manually change any of the properties except `pos` - use the `setPoints`, `setAngle`, and `setOffset` methods to ensure that the calculated properties are updated correctly.\n\nIt has the following methods:\n\n - `setPoints(points)` - Set the original points\n - `setAngle(angle)` - Set the current rotation angle (in radians)\n - `setOffset(offset)` - Set the current offset\n - `rotate(angle)` - Rotate the original points of this polygon counter-clockwise (around its local coordinate system) by the specified number of radians. The `angle` rotation will be applied on top of this rotation.\n - `translate(x, y)` - Translate the original points of this polygin (relative to the local coordinate system) by the specified amounts. The `offset` translation will be applied on top of this translation.\n\n### SAT.Box\n\nThis is a simple Box with a position, width, and height.  It is created by calling:\n```javascript\n// Create a box at (10,10) with width 20 and height 40.\nvar b = new SAT.Box(new SAT.Vector(10,10), 20, 40);\n```\n\nIt has the following properties:\n\n - `pos` - The bottom-left coordinate of the box.\n - `w` - The width of the box.\n - `h` - The height of the box.\n\nIt has the following methods:\n\n - `toPolygon()` - Returns a new Polygon whose edges are the edges of the box.\n\n### SAT.Response\n\nThis is the object representing the result of a collision between two objects.  It just has a simple `new Response()` constructor.\n\nIt has the following properties:\n\n - `a` - The first object in the collision.\n - `b` - The second object in the collison.\n - `overlap` - Magnitude of the overlap on the shortest colliding axis.\n - `overlapN` - The shortest colliding axis (unit-vector)\n - `overlapV` - The overlap vector (i.e. `overlapN.scale(overlap, overlap)`).  If this vector is subtracted from the position of `a`, `a` and `b` will no longer be colliding.\n - `aInB` - Whether the first object is completely inside the second.\n - `bInA` - Whether the second object is completely inside the first.\n\nIt has the following methods:\n\n- `clear()` - Clear the response so that it is ready to be reused for another collision test.\n\n\n<a name=\"tests\"></a>\nCollision Tests\n---------------\n\nSAT.js contains the following collision tests:\n\n### `SAT.pointInCircle(p, c)`\n\nChecks whether a given point is inside the specified circle.\n\n### `SAT.pointInPolygon(p, poly)`\n\nChecks whether a given point is inside a specified convex polygon.\n\n### `SAT.testCircleCircle(a, b, response)`\n\nTests for a collision between two `Circle`s, `a`, and `b`.  If a response is to be calculated in the event of collision, pass in a cleared `Response` object.\n\nReturns `true` if the circles collide, `false` otherwise.\n\n### `SAT.testPolygonCircle(polygon, circle, response)`\n\nTests for a collision between a `Polygon` and a `Circle`.  If a response is to be calculated in the event of a collision, pass in a cleared `Response` object.\n\nReturns `true` if there is a collision, `false` otherwise.\n\n### `SAT.testCirclePolygon(circle, polygon, response)`\n\nThe same thing as `SAT.testPolygonCircle`, but in the other direction.\n\nReturns `true` if there is a collision, `false` otherwise.\n\n*NOTE: This is slightly slower than `SAT.testPolygonCircle` as it just calls that and reverses the result*\n\n### `SAT.testPolygonPolygon(a, b, response)`\n\nTests whether two polygons `a` and `b` collide. If a response is to be calculated in the event of collision, pass in a cleared `Response` object.\n\nReturns `true` if there is a collision, `false` otherwise.\n\n*NOTE: If you want to detect a collision between `Box`es, use the `toPolygon()` method*\n\n<a name=\"examples\"></a>\nExamples\n--------\n\nTest two circles\n```javascript\nvar V = SAT.Vector;\nvar C = SAT.Circle;\n\nvar circle1 = new C(new V(0,0), 20);\nvar circle2 = new C(new V(30,0), 20);\nvar response = new SAT.Response();\nvar collided = SAT.testCircleCircle(circle1, circle2, response);\n\n// collided => true\n// response.overlap => 10\n// response.overlapV => (10, 0)\n```\n\nTest a circle and a polygon\n```javascript\nvar V = SAT.Vector;\nvar C = SAT.Circle;\nvar P = SAT.Polygon;\n\nvar circle = new C(new V(50,50), 20);\n// A square\nvar polygon = new P(new V(0,0), [\n  new V(0,0), new V(40,0), new V(40,40), new V(0,40)\n]);\nvar response = new SAT.Response();\nvar collided = SAT.testPolygonCircle(polygon, circle, response);\n\n// collided => true\n// response.overlap ~> 5.86\n// response.overlapV ~> (4.14, 4.14) - i.e. on a diagonal\n```\n\nTest two polygons\n```javascript\nvar V = SAT.Vector;\nvar P = SAT.Polygon;\n\n// A square\nvar polygon1 = new P(new V(0,0), [\n  new V(0,0), new V(40,0), new V(40,40), new V(0,40)\n]);\n// A triangle\nvar polygon2 = new P(new V(30,0), [\n  new V(0,0), new V(30, 0), new V(0, 30)\n]);\nvar response = new SAT.Response();\nvar collided = SAT.testPolygonPolygon(polygon1, polygon2, response);\n\n// collided => true\n// response.overlap => 10\n// response.overlapV => (10, 0)\n```\n\nNo collision between two Boxes\n```javascript\nvar V = SAT.Vector;\nvar B = SAT.Box;\n\nvar box1 = new B(new V(0,0), 20, 20).toPolygon();\nvar box2 = new B(new V(100,100), 20, 20).toPolygon();\nvar collided = SAT.testPolygonPolygon(box1, box2);\n\n// collided => false\n```\n\nHit testing a circle and polygon\n```javascript\nvar V = SAT.Vector;\nvar C = SAT.Circle;\nvar P = SAT.Polygon;\n\nvar triangle = new P(new V(30,0), [\n  new V(0,0), new V(30, 0), new V(0, 30)\n]);\nvar circle = new C(new V(100,100), 20);\n\nSAT.pointInPolygon(new V(0,0), triangle); // false\nSAT.pointInPolygon(new V(35, 5), triangle); // true\nSAT.pointInCircle(new V(0,0), circle); // false\nSAT.pointInCircle(new V(110,110), circle); // true\n\n```\n\nTests\n-----\n\nTo run the tests from your console:\n\n```\nmocha\n```\n\nTo install `mocha` you will need to have run `npm install` after cloning the repo.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jriecken/sat-js",
  "_id": "sat@0.5.0",
  "_shasum": "3087eb5238a94bb47816627f221bc6fb1fd4f143",
  "_from": "git://github.com/jriecken/sat-js",
  "_resolved": "git://github.com/jriecken/sat-js#9c1ee365218fd2d2a372cb5ca141959bbe6f92c3",
  "_fromGithub": true
}
